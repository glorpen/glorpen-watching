import argparse
import dataclasses
import os
import pathlib
import sys
import typing

import yaml
from prompt_toolkit.shortcuts import PromptSession, print_formatted_text as pprint
from prompt_toolkit.validation import Validator
from requests_oauthlib import OAuth1Session


@dataclasses.dataclass
class Config:
    board_id: str
    app_key: str
    app_secret: str
    user_key: str
    user_secret: str


def load_config(config_file: typing.Optional[os.PathLike] = None):
    paths = [
        config_file,
        os.environ.get("CONFIG_FILE", None),
        "gwatching.yaml",
        "~/.config/gwatching.yaml",
    ]

    for path in map(pathlib.Path, filter(None, paths)):
        path = path.expanduser()
        if path.exists():
            return Config(**yaml.safe_load(path.read_bytes()))

    return Config(
        board_id=os.environ.get("BOARD_ID"),
        app_key=os.environ.get("APP_KEY"),
        app_secret=os.environ.get("APP_SECRET"),
        user_key=os.environ.get("USER_KEY"),
        user_secret=os.environ.get("USER_SECRET"),
    )


def generate_config(config_file: typing.Optional[os.PathLike]):
    cli = PromptSession()

    not_blank = Validator.from_callable(
        lambda x: bool(len(x)),
        error_message='This value cannot be empty',
        move_cursor_to_end=True
    )

    def prompt(msg, *args, default=None, **kwargs):
        if default is not None:
            msg += f" [{default}]"
        return cli.prompt(msg + ":\n> ", *args, validator=not_blank, default=default or "", **kwargs)

    pprint("Answer following questions to generate config.")
    pprint()

    app_key = prompt("Application key")
    app_secret = prompt("Application secret")
    token_expiration = prompt("Token expiration time", default="never")
    board_id = prompt("Board id to use. Can be long or short form, as in eg. https://trello.com/b/<board_id>/example")

    request_token_url = 'https://trello.com/1/OAuthGetRequestToken'
    authorize_url = 'https://trello.com/1/OAuthAuthorizeToken'
    access_token_url = 'https://trello.com/1/OAuthGetAccessToken'

    pprint("Requesting token...")
    session = OAuth1Session(client_key=app_key, client_secret=app_secret)
    response = session.fetch_request_token(request_token_url)

    resource_owner_key = response.get('oauth_token')
    resource_owner_secret = response.get('oauth_token_secret')

    url = "{authorize_url}?oauth_token={oauth_token}&scope={scope}&expiration={expiration}&name={app_name}".format(
        authorize_url=authorize_url,
        oauth_token=resource_owner_key,
        expiration=token_expiration,
        scope="read,write",
        app_name="TV shows for Trello"
    )

    pprint()
    pprint("Go to the following link in your browser: ")
    pprint(url)
    pprint()
    oauth_verifier = prompt('Code generated by Trello')

    pprint("Fetching tokens...")
    session = OAuth1Session(
        client_key=app_key,
        client_secret=app_secret,
        resource_owner_key=resource_owner_key,
        resource_owner_secret=resource_owner_secret,
        verifier=oauth_verifier
    )
    response = session.fetch_access_token(access_token_url)

    pprint("Generated config:")
    config = yaml.dump(
        vars(
            Config(
                board_id=board_id,
                app_key=app_key,
                app_secret=app_secret,
                user_key=response.get('oauth_token'),
                user_secret=response.get('oauth_token_secret')
            )
        )
    )

    if config_file is None:
        pprint(config)
    else:
        pprint(f"Saving config to {config_file}")
        with pathlib.Path(config_file).open("wt") as f:
            f.write(config)


if __name__ == "__main__":
    p = argparse.ArgumentParser(prog="python -m glorpen.watching.config")
    p.add_argument("config_file", nargs="?", help="path to save config to")
    ns = p.parse_args()

    try:
        generate_config(ns.config_file)
    except Exception as e:
        print(str(e))
        p.exit(1)
